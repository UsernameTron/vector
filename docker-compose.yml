version: '3.8'

services:
  # Main application
  vector-rag-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vector-rag-app
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=8000
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-120}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - LOG_FILE_PATH=/app/logs/app.log
    volumes:
      - vector_data:/app/data
      - vector_logs:/app/logs
      - vector_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - vector-rag-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vector-rag.rule=Host(`vector-rag.localhost`)"
      - "traefik.http.services.vector-rag.loadbalancer.server.port=8000"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: vector-rag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - vector-rag-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: vector-rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - vector_logs:/var/log/nginx
    depends_on:
      - vector-rag-app
    networks:
      - vector-rag-network
    profiles:
      - with-nginx

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: vector-rag-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - vector-rag-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: vector-rag-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - vector-rag-network
    profiles:
      - monitoring

volumes:
  vector_data:
    driver: local
  vector_logs:
    driver: local
  vector_uploads:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vector-rag-network:
    driver: bridge