name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xvfb bandit safety
    
    - name: Run security checks
      run: |
        # Check for known security vulnerabilities
        safety check --json || true
        
        # Run bandit security linter
        bandit -r src/ agents.py vector_db.py -f json -o bandit-report.json || true
    
    - name: Run tests with coverage
      env:
        FLASK_ENV: testing
        OPENAI_API_KEY: sk-test-key-for-ci
        ENCRYPTION_SECRET: test-encryption-secret-for-ci
        ENCRYPTION_SALT: dGVzdC1zYWx0LWZvci1jaQ==
        CHROMA_PERSIST_DIRECTORY: /tmp/test_chroma_db
      run: |
        pytest --cov=src --cov=agents --cov=vector_db \
               --cov-report=xml \
               --cov-report=html \
               --cov-fail-under=60 \
               --junit-xml=pytest-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          bandit-report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Run black formatter check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
    
    - name: Run flake8 linter
      run: flake8 . --count --statistics
    
    - name: Run mypy type checking
      run: mypy src/ --ignore-missing-imports || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t vector-rag-database:latest .
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container \
          -e FLASK_ENV=testing \
          -e OPENAI_API_KEY=sk-test-key \
          -p 8000:8000 \
          vector-rag-database:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'